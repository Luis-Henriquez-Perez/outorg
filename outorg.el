;; * outorg.el --- Org-style comment editing

;; ** Copyright

;; Copyright (C) 2013 Thorsten Jolitz
;; This file is not (yet) part of GNU Emacs

;; Author: Thorsten Jolitz  (format "tjolitz%sgmail%s" "@" ".com")

;; ** Credits

;; This library is inspired by the way source-blocks can be edited in temporary
;; edit files in Org-mode (see http://orgmode.org/worg/org-contrib/babel/).

;; ** Commentary

;; `outorg' is like "reverse Org-Babel": editing of comment-sections from source
;; code files in temporary Org-mode buffers instead of editing of Org-mode
;; source-blocks in temporary source-code buffers. 

;; It is higly recommended to use `outline-minor-mode', `outxxtra.el' and
;; `outline-magic.el' for outline navigation and structure editing in your
;; source-code buffers. Alternatively, `orgstruct++-mode' might be used. Keep
;; in mind, that `outorg' only works with outlines like those produced by
;; using `comment-region' in your source-code buffer on Org-mode style
;; headlines. Take this file as an example for suitable outline headlines in
;; an Emacs Lisp buffer. In other major-modes, the `comment-start' character
;; ';' of Emacs Lisp would be replaced by that of the respective major-mode,
;; e.g. '#' in PicoLisp mode or '%' in LaTeX mode.

;; ** Emacs Version

;; `outorg.el' works with [GNU Emacs 24.2.1 (x86_64-unknown-linux-gnu, GTK+
;; Version 3.6.4) of 2013-01-20 on eric]. No attempts of testing with older
;; versions or other types of Emacs have been made (yet).

;; ** Installation

;; Insert
;; (require 'outorg)
;; in your .emacs file to install.  If you want a different prefix
;; key, insert first
;; (defvar outline-minor-mode-prefix "\C-c")
;; or whatever.  The prefix can only be changed before outline (minor)
;; mode is loaded.

;; ** ChangeLog

;; | date            | author(s)       | version |
;; |-----------------+-----------------+---------|
;; | <2013-02-11 Mo> | Thorsten Jolitz |     0.9 |

;; ** Bugs

;; `outorg' is line-based, it only works with 'one-line' comments, i.e. with
;; comment-sections like those produced by `comment-region' (a command that
;; comments or uncomments each line in the region). Those special multi-line
;; comments found in many programming languages are not recognized and lead to
;; undefined behaviour.

;; * Requires

(require 'outline)
(require 'org)

;; * Variables
;; ** Consts

(defconst outorg-version "0.9"
  "outorg version number.")

;; ** Vars

(defvar outline-minor-mode-prefix "\C-c"
  "New outline-minor-mode prefix.")

(defvar outorg-edit-whole-buffer-p nil
  "Non-nil if the whole code-buffer is edited.")

(defvar outorg-initial-window-config nil
  "Initial window-configuration when editing as Org.") 

;; copied and adapted from ob-core.el
(defvar outorg-temporary-directory)    ; FIXME why this duplication?
(unless (or noninteractive (boundp 'outorg-temporary-directory))
  (defvar outorg-temporary-directory
    (or (and (boundp 'outorg-temporary-directory)
	     (file-exists-p outorg-temporary-directory)
	     outorg-temporary-directory)
	(make-temp-file "outorg-" t))
    "Directory to hold temporary files created to edit code blocks.
Used by `org-babel-temp-file'.  This directory will be removed on
Emacs shutdown."))

;; copied and adapted form org-src.el
(defvar outorg-edit-mode-map (make-sparse-keymap))
(define-key outorg-edit-mode-map "\C-c'" 'outorg-copy-edits-and-exit)
(define-key outorg-edit-mode-map "\C-x\C-s" 'outorg-save-edits-to-tmp-file)

(define-minor-mode outorg-edit-mode
  "Minor mode for Org-mode buffers generated by outorg.
There is a mode hook, and keybindings for
`outorg-copy-edits-and-exit' and `outorg-save-edits-to-tmp-file'")

;; ** Hooks

(defvar outorg-hook nil
  "Functions to run after `outorg' is loaded.")

(defvar outorg-edit-mode-hook nil
  "Hook run after `outorg' switched a source code file or subtree to
  Org-mode.")

;; ** Customs

;; *** Custom Groups

(defgroup outorg nil
  "Library for outline navigation and Org-mode editing in Lisp buffers."
  :prefix "outorg-"
  :group 'lisp 
  :link '(url-link "http://emacswiki.org/emacs/OutlineMinorMode"))

;; *** Custom Vars

;; inspired by 'org-src.el'
(defcustom outorg-edit-buffer-persistent-message t
  "Non-nil means show persistent exit help message while in edit-buffer.
The message is shown in the header-line, which will be created in the
first line of the window showing the editing buffer."
  :group 'outorg
  :type 'boolean)


;; * Functions
;; ** Non-interactive Functions
;; *** Get Source Buffer Mode

(defun outorg-get-buffer-mode (buffer-or-string)
  "Return major mode of BUFFER-OR-STRING."
  (with-current-buffer buffer-or-string
     major-mode))

;; *** Configure Edit Buffer

;; copied and adapted from org-src.el
(defun outorg-edit-mode-configure-buffer ()
  "Configure edit buffer"
  (let ((msg
         (concat "[ "
                 (buffer-name
                  (marker-buffer outorg-code-buffer-point-marker))
                 " ] "
                 "Exit with C-c ' (C-c and single quote)")))
    (org-add-hook 'kill-buffer-hook
                  'outorg-save-edits-to-tmp-file nil 'local)
    ;; (setq buffer-offer-save t)
    (and outorg-edit-buffer-persistent-message
         (org-set-local 'header-line-format msg))
    ;; (setq buffer-file-name
    ;;       (concat (buffer-file-name
    ;; (marker-buffer outorg-code-buffer-point-marker))
    ;;               "[" (buffer-name) "]"))
    (if (featurep 'xemacs)
        (progn
          (make-variable-buffer-local
           'write-contents-hooks) ; needed only for 21.4
          (setq write-contents-hooks
                '(outorg-save-edits-to-tmp-file)))
      (setq write-contents-functions
            '(outorg-save-edits-to-tmp-file)))
    ;; (setq buffer-read-only t) ; why?
    ))

(org-add-hook 'outorg-edit-mode-hook 'outorg-edit-mode-configure-buffer)

;; *** Backup Edit Buffer

;; copied and adapted from ob-core.el
(defun outorg-temp-file (prefix &optional suffix)
  "Create a temporary file in the `outorg-temporary-directory'.
Passes PREFIX and SUFFIX directly to `make-temp-file' with the
value of `temporary-file-directory' temporarily set to the value
of `outorg-temporary-directory'."
  (let ((temporary-file-directory
	 (if (file-remote-p default-directory)
	     (concat (file-remote-p default-directory) "/tmp")
	   (or (and (boundp 'outorg-temporary-directory)
		    (file-exists-p outorg-temporary-directory)
		    outorg-temporary-directory)
	       temporary-file-directory))))
      (make-temp-file prefix nil suffix)))

(defun outorg-save-edits-to-tmp-file ()
  "Save edit-buffer in temporary file"
  (interactive)
  (let ((tmp-file
         (outorg-temp-file
          (file-name-sans-extension
           (file-name-nondirectory
            (buffer-file-name
             (marker-buffer
              outorg-code-buffer-point-marker)))))))
    (write-region nil nil tmp-file)))

;; copied and adapted from ob-core.el
(defun outorg-remove-temporary-directory ()
  "Remove `outorg-temporary-directory' on Emacs shutdown."
  (when (and (boundp 'outorg-temporary-directory)
	     (file-exists-p outorg-temporary-directory))
    ;; taken from `delete-directory' in files.el
    (condition-case nil
	(progn
	  (mapc (lambda (file)
		  ;; This test is equivalent to
		  ;; (and (file-directory-p fn) (not (file-symlink-p fn)))
		  ;; but more efficient
		  (if (eq t (car (file-attributes file)))
		      (delete-directory file)
		    (delete-file file)))
		;; We do not want to delete "." and "..".
		(directory-files outorg-temporary-directory 'full
				 "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*"))
	  (delete-directory outorg-temporary-directory))
      (error
       (message "Failed to remove temporary outorg directory %s"
		(if (boundp 'outorg-temporary-directory)
		    outorg-temporary-directory
		  "[directory not defined]"))))))

(add-hook 'kill-emacs-hook 'outorg-remove-temporary-directory)

;; *** Reset Global Vars

(defun outorg-reset-global-vars ()
  "Reset some global vars defined by outorg to initial values."
  (set-marker outorg-code-buffer-point-marker nil)
  (set-marker outorg-code-buffer-beg-of-subtree-marker nil)
  (set-marker outorg-edit-buffer-marker nil)
  (setq outorg-edit-whole-buffer-p nil)
  (setq outorg-initial-window-config nil))

;; *** Remove Trailing Blank Lines

;; inspired by `article-remove-trailing-blank-lines' in `gnus-art.el'
(defun outorg-remove-trailing-blank-lines ()
  "Remove all trailing blank lines from buffer."
  (save-excursion
    (let ((inhibit-read-only t))
      (goto-char (point-max))
      (delete-region
       (point)
       (progn
	 (while (and (not (bobp))
		     (looking-at "^[ \t]*$"))
	   (forward-line -1))
	 (forward-line 1)
	 (point))))))


;; *** Copy and Convert

(defun outorg-copy-and-convert ()
  "Copy code buffer content to tmp-buffer and convert it to Org syntax.
If `outorg-edit-whole-buffer' is non-nil, copy the whole buffer, otherwise
  the current subtree."
  (let* ((edit-buffer
          (get-buffer-create "*outorg-edit-buffer*")))
    (save-restriction
      (with-current-buffer edit-buffer
        (erase-buffer))
      (widen)
      ;; copy code buffer content
      (copy-to-buffer
       edit-buffer
       (if outorg-edit-whole-buffer-p
           (point-min)
         (save-excursion
           (outline-back-to-heading 'INVISIBLE-OK)
           (point)))
       (if outorg-edit-whole-buffer-p
           (point-max)
         (save-excursion
           (outline-end-of-subtree)
           (point)))))
    ;; switch to edit buffer
    (if (one-window-p) (split-window-sensibly (get-buffer-window)))
    (switch-to-buffer-other-window edit-buffer)
    ;; set point
    (goto-char
     (if outorg-edit-whole-buffer-p
         (marker-position outorg-code-buffer-point-marker)
       (1+ (- (marker-position outorg-code-buffer-point-marker)
          (marker-position outorg-code-buffer-beg-of-subtree-marker)))))
    ;; activate programming language major mode and convert to org
    (funcall (outorg-get-buffer-mode
              (marker-buffer outorg-code-buffer-point-marker)))
    (outorg-convert-to-org)
    ;; change major mode to org-mode
    (org-mode)
    ;; activate minor mode outorg-edit-mode
    (outorg-edit-mode)
    ;; set outline visibility
    (if (not outorg-edit-whole-buffer-p)
        (show-all)
      (hide-sublevels 3)
      (show-subtree))))

(defun outorg-convert-to-org ()
  "Convert file content to Org Syntax"
  (let* ((last-line-comment-p nil)
         (mode-name
          (format
           "%S" (with-current-buffer
                    (marker-buffer outorg-code-buffer-point-marker)
                  major-mode)))
         (splitted-mode-name
          (split-string mode-name "-mode"))
         (language-name
          (if (> (length splitted-mode-name) 1)
              (car splitted-mode-name)
            (car (split-string mode-name "\\."))))
         (in-org-babel-load-languages-p
          (assq
           (intern language-name)
           org-babel-load-languages)))
    (save-excursion
      (goto-char (point-min))
      (outorg-remove-trailing-blank-lines)
      (while (not (eobp))
        (cond
         ;; empty line (do nothing)
         ((looking-at "^[[:space:]]*$"))
         ;; comment line after comment line or at
         ;; beginning of buffer
         ((and
           (save-excursion
             (eq (comment-on-line-p) (point-at-bol)))
           (or (bobp) last-line-comment-p))
          (uncomment-region (point-at-bol) (point-at-eol))
          (setq last-line-comment-p t))
         ;; line of code after comment line
         ((and
           (save-excursion
             (not (eq (comment-on-line-p) (point-at-bol))))
           last-line-comment-p)
          (newline)
          (forward-line -1)
          (insert
           (if in-org-babel-load-languages-p
               (concat "#+begin_src " language-name)
             "#+begin_example"))
          (forward-line)
          (setq last-line-comment-p nil))
         ;; comment line after line of code
         ((and
           (save-excursion
             (eq (comment-on-line-p) (point-at-bol)))
           (not last-line-comment-p))
          (uncomment-region (point-at-bol) (point-at-eol))
          (save-excursion
            (forward-line -1)
            (unless (looking-at "^[[:space:]]*$")
              (newline))
            (if in-org-babel-load-languages-p
                (insert "#+end_src")
              (insert "#+end_example"))
            (newline))
          (setq last-line-comment-p t))
         ;; last line after line of code
         ((and
           (eq (line-number-at-pos)
               (1- (count-lines (point-min) (point-max))))
           (not last-line-comment-p))
          (goto-char (point-max))
          (unless (looking-at "^[[:space:]]*$")
            (newline))
          (if in-org-babel-load-languages-p
              (insert "#+end_src")
            (insert "#+end_example"))
          (newline))
         ;; line of code after line of code
         (t (setq last-line-comment-p nil)))
        ;; continue loop
        (progn
          (forward-line)
          (and (eobp)
               (looking-at "^[[:space:]]*$")
               (not last-line-comment-p)
               (if in-org-babel-load-languages-p
                   (insert "#+end_src")
                 (insert "#+end_example"))))))))

(defun outorg-convert-back-to-code ()
  "Convert edit-buffer content back to programming language syntax.
Assume that edit-buffer major-mode has been set back to the
  programming-language major-mode of the associated code-buffer
  before this function is called."
  (let ((inside-code-or-example-block-p nil)
        (comment-style "plain"))
    (save-excursion
      (goto-char (point-min))
      (while (not (eobp))
        (cond
         ;; empty line (do nothing)
         ((looking-at "^[[:space:]]*$"))
         ;; begin code/example block
         ((looking-at "^[ \t]*#\\+begin_?")
          (kill-whole-line)
          (forward-line -1)
          (setq inside-code-or-example-block-p t))
         ;; end code/example block
         ((looking-at "^[ \t]*#\\+end_?")
          (kill-whole-line)
          (forward-line -1)
          (setq inside-code-or-example-block-p nil))
         ;; line inside code/example block (do nothing)
         (inside-code-or-example-block-p)
         ;; not-empty line outside code/example block
         (t (comment-region (point-at-bol) (point-at-eol))))
        (forward-line)))))

(defun outorg-replace-code-with-edits ()
  "Replace code-buffer contents with edits."
  (let* ((edit-buf (marker-buffer outorg-edit-buffer-marker))
         (code-buf (marker-buffer outorg-code-buffer-point-marker))
         (edit-buf-point-min
          (with-current-buffer edit-buf
            (point-min)))
         (edit-buf-point-max
          (with-current-buffer edit-buf
            (save-excursion
              (goto-char (point-max))
              (unless (and (bolp) (looking-at "^[ \t]*$"))
                (newline))
              (point)))))
    (with-current-buffer code-buf
      (if outorg-edit-whole-buffer-p
          (progn
            (erase-buffer)
            (insert-buffer-substring-no-properties
             edit-buf edit-buf-point-min edit-buf-point-max))
        (goto-char (marker-position outorg-code-buffer-point-marker))
        (save-restriction
          (narrow-to-region
           (save-excursion
             (outline-back-to-heading 'INVISIBLE-OK)
             (point))
           (save-excursion
             (outline-end-of-subtree)
             (point)))
          (delete-region (point-min) (point-max))
          (insert-buffer-substring-no-properties
           edit-buf edit-buf-point-min edit-buf-point-max))
        ;; (save-buffer) 
        ))))

;; ** Commands
;; *** Edit as Org 

(defun outorg-edit-as-org (arg)
  "Convert and copy to temporary Org buffer
With ARG, edit the whole buffer, otherwise the current subtree."
  (interactive "P")
  (setq outorg-code-buffer-point-marker (point-marker))
  (save-excursion
    (outline-back-to-heading 'INVISIBLE-OK)
    (setq outorg-code-buffer-beg-of-subtree-marker (point-marker)))
  (and arg (setq outorg-edit-whole-buffer-p t))
  (setq outorg-initial-window-config
        (current-window-configuration))
  (outorg-copy-and-convert))

;; *** Copy edits

(defun outorg-copy-edits-and-exit ()
  "Replace code-buffer content with (converted) edit-buffer content and
  kill edit-buffer"
  (interactive)
  (widen)
  (funcall
   (outorg-get-buffer-mode
    (marker-buffer outorg-code-buffer-point-marker)))
  (setq outorg-edit-buffer-marker (point-marker))
  (outorg-convert-back-to-code)
  (outorg-replace-code-with-edits)
  (set-window-configuration
   outorg-initial-window-config)
  (if outorg-edit-whole-buffer-p
      (goto-char (marker-position outorg-edit-buffer-marker))
    (goto-char (1- (+ (marker-position
                       outorg-edit-buffer-marker)
                      (marker-position
                       outorg-code-buffer-beg-of-subtree-marker)))))
  (kill-buffer
   (marker-buffer outorg-edit-buffer-marker))
  ;; (switch-to-buffer
  ;;  (marker-buffer outorg-code-buffer-point-marker))
  ;; (goto-char
  ;;  (marker-position outorg-code-buffer-point-marker))
  (outorg-reset-global-vars))

;; * Keybindings.

;; ** Outline Minor Mode

;; ;; We provide bindings for all keys.
;; ;; FIXME: very old stuff from `out-xtra' - still necesary?

;; (if (fboundp 'eval-after-load)
;;     ;; FSF Emacs 19.
;;     (eval-after-load "outline"
;;       '(let ((map (lookup-key outline-minor-mode-map
;; 			      outline-minor-mode-prefix)))
;;           ;; TODO differentiate between called in code or edit buffer
;;          (define-key map "'" 'outorg-edit-as-org)
;;          ;; TODO add these keybindings to org-mode keymap (all?)
;;          ;; (define-key map "\C-s" 'outorg-copy-edits-and-exit)
;;          ;; (define-key map "\C-c" 'outorg-copy-edits-and-exit)
;;          ;; (define-key map "'" 'outorg-copy-edits-and-exit)

;; 	 ;; (if (fboundp 'update-power-keys)
;; 	 ;;     (update-power-keys outline-minor-mode-map))
;;          ))

;;   (if (string-match "Lucid" emacs-version)
;;       (progn				;; Lucid Emacs 19
;; 	(defconst outline-menu
;; 	  '(
;; 	    ;; ["Hide Sublevels" outline-hide-sublevels t]
;;             ))

;;         (defun outline-add-menu ()
;; 	  (set-buffer-menubar (copy-sequence current-menubar))
;; 	  (add-menu nil "Outline" outline-menu))

;; 	(add-hook 'outline-minor-mode-hook 'outline-add-menu)
;; 	(add-hook 'outline-mode-hook 'outline-add-menu)
;; 	(add-hook 'outline-minor-mode-off-hook
;;                   (function (lambda () (delete-menu-item '("Outline")))))))


;; * Run hooks and provide

(run-hooks 'outorg-hook)

(provide 'outorg)

;; Local Variables:
;; coding: utf-8
;; ispell-local-dictionary: "en_US"
;; End:

;; outorg.el ends here
